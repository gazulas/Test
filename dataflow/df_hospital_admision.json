{
	"name": "df_hospital_admision",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_adminsion_src",
						"type": "DatasetReference"
					},
					"name": "srchospitaladminsion"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "srccountrylkp"
				},
				{
					"dataset": {
						"referenceName": "ds_date_dim_lkp",
						"type": "DatasetReference"
					},
					"name": "srcDateDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_tgt_hospital_admission_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_tgt_hospital_admissions_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select2"
				},
				{
					"name": "splitDailyWeekly"
				},
				{
					"name": "derivedYearWeek"
				},
				{
					"name": "aggMaxMinWdt"
				},
				{
					"name": "join1"
				},
				{
					"name": "pivotIndicator"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectWeekly"
				},
				{
					"name": "selectDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srchospitaladminsion",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srccountrylkp",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srcDateDim",
				"srchospitaladminsion select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, srccountrylkp lookup(select1@country == srccountrylkp@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = select1@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator1 = indicator",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select2",
				"pivotIndicator split(indicator1 == 'Weekly new hospital admissions per 100k' || indicator1 == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitDailyWeekly@(Weekly, Daily)",
				"srcDateDim derive(ecdc_year_week = year + '-W' + lpad(week_of_year,2,'0')) ~> derivedYearWeek",
				"derivedYearWeek aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggMaxMinWdt",
				"splitDailyWeekly@Weekly, aggMaxMinWdt join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join1",
				"select2 pivot(groupBy(country,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          country_code_3_digit,",
				"          population,",
				"          country_code_2_digit,",
				"          indicator1),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotIndicator",
				"join1 sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"splitDailyWeekly@Daily sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source,",
				"          { new_ICU admissions_count} = {Weekly new ICU admissions per 100kcount},",
				"          { new_hospital admissions_count} = {Weekly new hospital admissions per 100kcount},",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeekly",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          icu_admissions_count = {Weekly new ICU admissions per 100kcount},",
				"          hospital_admissions_count = {Weekly new hospital admissions per 100kcount},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDaily",
				"selectWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeekly",
				"selectDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily"
			]
		}
	}
}